{"version":3,"sources":["App.js","index.js"],"names":["App","useState","gridVisibility","setGridVisibility","preserveBuffer","setPreserveBuffer","THREE","window","innerWidth","innerHeight","camera","grid","particles","setParticles","dt","setDT","sigma","rho","beta","params","setParams","useEffect","stats","Stats","scene","visible","add","renderer","preserveDrawingBuffer","antialias","autoClearColor","setSize","document","body","appendChild","domElement","controls","OrbitControls","addEventListener","clear","aspect","updateProjectionMatrix","geometry","color","positions","colors","i","x","Math","random","y","z","push","setRGB","abs","r","g","b","setAttribute","material","size","vertexColors","points","light","position","update","animate","begin","requestAnimationFrame","attributes","array","needsUpdate","length","_x","_y","_z","dx","dy","dz","updatePTS","render","end","dispose","options","setOptionsOpen","id","style","height","width","right","top","Paper","IconButton","onClick","Slide","direction","in","mountOnEnter","unmountOnExit","overflow","Grid","container","padding","item","spacing","xs","Typography","Link","href","target","rel","onSubmit","event","preventDefault","f","FormData","Number","get","TextField","name","defaultValue","inputProps","type","step","label","Button","fullWidth","Divider","marginTop","marginBottom","FormControl","InputLabel","Select","value","onChange","MenuItem","FormControlLabel","control","Switch","checked","fontSize","labelPlacement","set","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f93df91a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport Stats from 'stats.js'\r\n\r\nimport {\r\n  Button, Select, MenuItem, FormControl, InputLabel, Grid, Slide, Typography,\r\n  Switch, TextField, Divider, FormControlLabel, IconButton, Paper, Link\r\n} from '@material-ui/core'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\n\r\nfunction App() {\r\n  const [gridVisibility, setGridVisibility] = useState(false)\r\n  const [preserveBuffer, setPreserveBuffer] = useState(false)\r\n  // eslint-disable-next-line\r\n  const [camera, setCamera] = useState(new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000))\r\n  // eslint-disable-next-line\r\n  const [grid, setGrid] = useState(new THREE.GridHelper(150, 150))\r\n  const [particles, setParticles] = useState(20000)\r\n  const [dt, setDT] = useState(.00125)\r\n  // eslint-disable-next-line\r\n  const [params, setParams] = useState({ sigma: 10, rho: 28, beta: 8.0 / 3.0 })\r\n  useEffect(() => {\r\n    // show stats\r\n\r\n    const stats = new Stats()\r\n    // stats.showPanel(0)\r\n    // document.getElementById('stats').appendChild(stats.dom)\r\n    const scene = new THREE.Scene();\r\n    // scene.background = new THREE.Color(0x121212)\r\n    grid.visible = false;\r\n    scene.add(grid);\r\n    const renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: preserveBuffer, antialias: true })\r\n    renderer.autoClearColor = !preserveBuffer;\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.addEventListener('change', () => { renderer.clear() })\r\n\r\n    const resizeWindow = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    }\r\n    window.addEventListener('resize', resizeWindow());\r\n\r\n    const geometry = new THREE.BufferGeometry();\r\n    const color = new THREE.Color();\r\n    const positions = [];\r\n    const colors = [];\r\n    for (let i = 0; i < particles; i++) {\r\n      const x = (Math.random() * 25);\r\n      const y = (Math.random() * 25);\r\n      const z = (Math.random() * 25);\r\n      positions.push(x, y, z)\r\n      color.setRGB(Math.abs(x / 25), Math.abs(y / 25), Math.abs(z / 25));\r\n      colors.push(color.r, color.g, color.b);\r\n    }\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    const material = new THREE.PointsMaterial({ size: .15, vertexColors: true });\r\n    const points = new THREE.Points(geometry, material);\r\n    scene.add(points);\r\n\r\n    // params for lorenz equations\r\n    const sigma = params.sigma\r\n    const rho = params.rho\r\n    const beta = params.beta\r\n    const updatePTS = () => {\r\n      const positions = points.geometry.attributes.position.array;\r\n      points.geometry.attributes.position.needsUpdate = true;\r\n\r\n      for (let i = 0; i < positions.length; i += 3) {\r\n        // console.log(i, positions[i], positions[i + 1], positions[i + 2])\r\n        const _x = positions[i]\r\n        const _y = positions[i + 1]\r\n        const _z = positions[i + 2]\r\n\r\n        const dx = (sigma * (_y - _x)) * dt;\r\n        const dy = ((_x * (rho - _z)) - _y) * dt\r\n        const dz = ((_x * _y) - (beta * _z)) * dt\r\n\r\n        positions[i] += dx\r\n        positions[i + 1] += dy\r\n        positions[i + 2] += dz\r\n      }\r\n    }\r\n    const light = new THREE.AmbientLight(0xffffff, 100);\r\n    scene.add(light);\r\n    camera.position.z = 75;\r\n    camera.position.x = 0;\r\n    camera.position.y = 0;\r\n    controls.update();\r\n    var animate = () => {\r\n      stats.begin()\r\n      requestAnimationFrame(animate);\r\n      updatePTS()\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n      stats.end()\r\n    };\r\n    animate();\r\n    return () => {\r\n      geometry.dispose()\r\n      material.dispose()\r\n      renderer.dispose()\r\n    }\r\n  }, [preserveBuffer, particles, grid, camera, dt, params])\r\n\r\n\r\n  const updateParticleCount = (event) => {\r\n    setParticles(event.target.value);\r\n  };\r\n  const updateTimeStep = (event) => {\r\n    setDT(event.target.value);\r\n  };\r\n  const updateParams = (event) => {\r\n    event.preventDefault()\r\n    const f = new FormData(event.target)\r\n    setParams({ sigma: Number(f.get('sigma')), beta: Number(f.get('beta')), rho: Number(f.get('rho')) })\r\n  }\r\n  const updateGrid = () => {\r\n    setGridVisibility(!grid.visible);\r\n    grid.visible = !grid.visible\r\n  }\r\n  const [options, setOptionsOpen] = useState(false)\r\n  return (\r\n    <div>\r\n      <div id='stats' style={{ height: '48px', width: '80px' }}></div>\r\n      <div id='options' style={{ position: 'absolute', right: '5px', top: '0px' }}>\r\n        <Paper style={{ position: 'absolute', right: '5px', top: '0px' }}>\r\n          <IconButton onClick={() => setOptionsOpen(!options)}>\r\n            {options ? <><ChevronRightIcon /><SettingsIcon /></> : <><ChevronLeftIcon /><SettingsIcon /></>}\r\n          </IconButton>\r\n        </Paper>\r\n        <Slide direction='left' in={options} mountOnEnter unmountOnExit>\r\n          <Paper style={{ position: 'absolute', top: '52px', right: '5px', width: '500px', overflow: 'hidden' }}>\r\n            <Grid container direction='column' style={{ padding: '.85rem' }}>\r\n              <Grid item container spacing={1}>\r\n                <Grid item xs={8}>\r\n                  <Typography>Sigma, beta, and rho are parameters for Lorenz equations ({<Link href='https://en.wikipedia.org/wiki/Lorenz_system' target='_blank' rel=\"noreferrer\">Wikipedia</Link>})</Typography>\r\n                  <Typography>Try changing them and click 'update params' to restart the simulation!</Typography>\r\n                  <Typography>dx/dt = sigma*(y-x)</Typography>\r\n                  <Typography>dy/dt = x*(rho-z) - y</Typography>\r\n                  <Typography>dz/dt = x*y - beta*z</Typography>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  <form onSubmit={updateParams}>\r\n                    <TextField name='sigma' defaultValue={params.sigma} inputProps={{ type: 'number', step: 'any' }} label='SIGMA' />\r\n                    <TextField name='beta' defaultValue={params.beta} inputProps={{ type: 'number', step: 'any' }} label='BETA' />\r\n                    <TextField name='rho' defaultValue={params.rho} inputProps={{ type: 'number', step: 'any' }} label='RHO' />\r\n                    <Button fullWidth type='submit'>UPDATE PARAMS</Button>\r\n                  </form>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n              <Grid item>\r\n                <Grid item container spacing={1}>\r\n                  <Grid item xs={8}>\r\n                    <Typography>Chooses how many particles to render your scene with.\r\n                      If the FPS is low, try setting this to a lower value.</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <FormControl\r\n                      fullWidth\r\n                    >\r\n                      <InputLabel>PARTICLES</InputLabel>\r\n                      <Select\r\n                        value={particles}\r\n                        onChange={updateParticleCount}\r\n                      >\r\n                        <MenuItem value={10000}>10000</MenuItem>\r\n                        <MenuItem value={20000}>20000</MenuItem>\r\n                        <MenuItem value={30000}>30000</MenuItem>\r\n                        <MenuItem value={50000}>50000</MenuItem>\r\n                        <MenuItem value={100000}>100000</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n              <Grid item>\r\n                <Grid item container spacing={1}>\r\n                  <Grid item xs={8}>\r\n                    <Typography>Chooses what dt is set to for Lorenz equations.\r\n                      If FPS is low, try setting this to a&nbsp;higher value.</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <FormControl\r\n                      fullWidth\r\n                    >\r\n                      <InputLabel>TIMESTEP</InputLabel>\r\n                      <Select\r\n                        value={dt}\r\n                        onChange={updateTimeStep}\r\n                      >\r\n                        <MenuItem value={.000625}>.000625</MenuItem>\r\n                        <MenuItem value={.00125}>.00125</MenuItem>\r\n                        <MenuItem value={.0025}>.005</MenuItem>\r\n                        <MenuItem value={.005}>.05</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n              <Grid item>\r\n                <Grid item container spacing={1}>\r\n                  <Grid item xs={8}>\r\n                    <Typography>Sets whether old pixels are cleared before the next frame is drawn.</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <FormControlLabel\r\n                      control={<Switch checked={preserveBuffer} onChange={() => setPreserveBuffer(!preserveBuffer)}></Switch>}\r\n                      label={<Typography style={{ fontSize: '.875rem' }}>TOGGLE BUFFER</Typography>}\r\n                      labelPlacement='start'\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n              <Grid item>\r\n                <Grid item container spacing={1}>\r\n                  <Grid item xs={8}>\r\n                    <Typography>Toggles visibility of gridlines.</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <FormControlLabel\r\n                      control={<Switch checked={gridVisibility} onChange={updateGrid}></Switch>}\r\n                      label={<Typography style={{ fontSize: '.875rem' }}>TOGGLE GRID</Typography>}\r\n                      labelPlacement='start'\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n              <Grid item>\r\n                <Grid item container spacing={1}>\r\n                  <Grid item xs={8}>\r\n                    <Typography>Resets the camera position/rotation.</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Button fullWidth onClick={() => camera.position.set(0, 0, 75)}>Zero Camera</Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Slide>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}