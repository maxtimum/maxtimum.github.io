{"version":3,"sources":["components/attractors/Lorenz.js","components/attractors/Thomas.js","Attractors.js","index.js"],"names":["updateParams","event","preventDefault","f","FormData","target","res","sigma","Number","get","beta","rho","document","dispatchEvent","CustomEvent","detail","idx","p","Lorenz","params","dt","this","positions","i","length","_x","_y","_z","dx","dy","dz","Grid","item","xs","Typography","Link","href","rel","onSubmit","TextField","name","defaultValue","inputProps","type","step","label","Button","fullWidth","b","Thomas","Math","sin","Attractors","useState","gridVisibility","setGridVisibility","preserveBuffer","setPreserveBuffer","THREE","window","innerWidth","innerHeight","camera","grid","particles","setParticles","setDT","attractors","attractor","setAttractor","useEffect","scene","visible","add","renderer","preserveDrawingBuffer","antialias","autoClearColor","setSize","body","appendChild","domElement","controls","OrbitControls","addEventListener","clear","aspect","updateProjectionMatrix","geometry","color","colors","x","random","y","z","push","setRGB","abs","r","g","setAttribute","material","size","vertexColors","points","light","position","update","animate","requestAnimationFrame","updatePTS","attributes","array","needsUpdate","render","dispose","e","set","options","setOptionsOpen","id","style","right","top","Paper","IconButton","onClick","Slide","direction","in","mountOnEnter","unmountOnExit","width","overflow","container","padding","marginBottom","FormControl","InputLabel","Select","value","onChange","MenuItem","spacing","getInfoPanel","Divider","marginTop","FormControlLabel","control","Switch","checked","fontSize","labelPlacement","ReactDOM","exact","path","getElementById"],"mappings":"qZACA,SAASA,EAAaC,GAClBA,EAAMC,iBACN,IAAMC,EAAI,IAAIC,SAASH,EAAMI,QACvBC,EAAM,CAAEC,MAAOC,OAAOL,EAAEM,IAAI,UAAWC,KAAMF,OAAOL,EAAEM,IAAI,SAAUE,IAAKH,OAAOL,EAAEM,IAAI,SAC5FG,SAASC,cAAc,IAAIC,YAAY,oBAAqB,CAAEC,OAAQ,CAAEC,IAAK,EAAGC,EAAGX,M,IAElEY,E,WACjB,aAA4E,IAAhEC,EAA+D,uDAAtD,CAAEZ,MAAO,GAAII,IAAK,GAAID,KAAM,EAAM,GAAOU,EAAa,uDAAR,OAAQ,oBACvEC,KAAKL,IAAM,EACXK,KAAKF,OAASA,EACdE,KAAKD,GAAKA,E,6CAEd,SAAUE,GACN,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,GAAK,EAAG,CAE1C,IAAME,EAAKH,EAAUC,GACfG,EAAKJ,EAAUC,EAAI,GACnBI,EAAKL,EAAUC,EAAI,GAEnBK,EAAMP,KAAKF,OAAOZ,OAASmB,EAAKD,GAAOJ,KAAKD,GAC5CS,GAAOJ,GAAMJ,KAAKF,OAAOR,IAAMgB,GAAOD,GAAML,KAAKD,GACjDU,GAAOL,EAAKC,EAAOL,KAAKF,OAAOT,KAAOiB,GAAON,KAAKD,GAExDE,EAAUC,IAAMK,EAChBN,EAAUC,EAAI,IAAMM,EACpBP,EAAUC,EAAI,IAAMO,K,0BAI5B,WACI,OAAQ,qCACJ,eAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,UACI,eAACC,EAAA,EAAD,4EAA2E,cAACC,EAAA,EAAD,CAAMC,KAAK,8CAA8C/B,OAAO,SAASgC,IAAI,aAA7E,uBAA3E,OACA,cAACH,EAAA,EAAD,qFACA,cAACA,EAAA,EAAD,kCACA,cAACA,EAAA,EAAD,oCACA,cAACA,EAAA,EAAD,sCAEJ,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,uBAAMK,SAAUtC,EAAhB,UACI,cAACuC,EAAA,EAAD,CAAWC,KAAK,QAAQC,aAAcpB,KAAKF,OAAOZ,MAAOmC,WAAY,CAAEC,KAAM,SAAUC,KAAM,OAASC,MAAM,UAC5G,cAACN,EAAA,EAAD,CAAWC,KAAK,OAAOC,aAAcpB,KAAKF,OAAOT,KAAMgC,WAAY,CAAEC,KAAM,SAAUC,KAAM,OAASC,MAAM,SAC1G,cAACN,EAAA,EAAD,CAAWC,KAAK,MAAMC,aAAcpB,KAAKF,OAAOR,IAAK+B,WAAY,CAAEC,KAAM,SAAUC,KAAM,OAASC,MAAM,QACxG,cAACC,EAAA,EAAD,CAAQC,WAAS,EAACJ,KAAK,SAAvB,uC,KC3CpB,SAAS3C,EAAaC,GAClBA,EAAMC,iBACN,IAAMC,EAAI,IAAIC,SAASH,EAAMI,QACvBC,EAAM,CAAE0C,EAAGxC,OAAOL,EAAEM,IAAI,OAC9BG,SAASC,cAAc,IAAIC,YAAY,oBAAqB,CAAEC,OAAQ,CAAEC,IAAK,EAAGC,EAAGX,M,IAElE2C,E,WACjB,aAAmD,IAAvC9B,EAAsC,uDAA7B,CAAE6B,EAAG,SAAW5B,EAAa,uDAAR,OAAQ,oBAC9CC,KAAKL,IAAM,EACXK,KAAKF,OAASA,EACdE,KAAKD,GAAK,GAAKA,E,6CAEnB,SAAUE,GACN,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,GAAK,EAAG,CAE1C,IAAME,EAAKH,EAAUC,GACfG,EAAKJ,EAAUC,EAAI,GACnBI,EAAKL,EAAUC,EAAI,GAEnBK,GAAMsB,KAAKC,IAAIzB,GAAOL,KAAKF,OAAO6B,EAAIvB,GAAOJ,KAAKD,GAClDS,GAAMqB,KAAKC,IAAIxB,GAAON,KAAKF,OAAO6B,EAAItB,GAAOL,KAAKD,GAClDU,GAAMoB,KAAKC,IAAI1B,GAAOJ,KAAKF,OAAO6B,EAAIrB,GAAON,KAAKD,GAExDE,EAAUC,IAAMK,EAChBN,EAAUC,EAAI,IAAMM,EACpBP,EAAUC,EAAI,IAAMO,K,0BAI5B,WACI,OAAQ,qCACJ,eAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,UACI,eAACC,EAAA,EAAD,qFAAoF,cAACC,EAAA,EAAD,CAAMC,KAAK,yEAAyE/B,OAAO,SAASgC,IAAI,aAAxG,uBAApF,OACA,cAACH,EAAA,EAAD,mFACA,cAACA,EAAA,EAAD,mCACA,cAACA,EAAA,EAAD,mCACA,cAACA,EAAA,EAAD,sCAEJ,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,uBAAMK,SAAUtC,EAAhB,UACI,cAACuC,EAAA,EAAD,CAAWC,KAAK,IAAIC,aAAcpB,KAAKF,OAAO6B,EAAGN,WAAY,CAAEC,KAAM,SAAUC,KAAM,OAASC,MAAM,MACpG,cAACC,EAAA,EAAD,CAAQC,WAAS,EAACJ,KAAK,SAAvB,uC,KC8MLS,MAxOf,WACI,MAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA4BJ,mBAAS,IAAIK,IAAwB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,GAAK,MAAlH,mBAAOC,EAAP,KACA,GADA,KACwBT,mBAAS,IAAIK,IAAiB,IAAK,OAA3D,mBAAOK,EAAP,KACA,GADA,KACkCV,mBAAS,MAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAoBZ,mBAAS,QAA7B,mBAAOjC,EAAP,KAAW8C,EAAX,KAEMC,EAAa,CAAC,IAAIjD,EAAU,IAAI+B,GACtC,EAAkCI,mBAASc,EAAW,IAAtD,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACN,IAAMC,EAAQ,IAAIb,IAClBK,EAAKS,SAAU,EACfD,EAAME,IAAIV,GACV,IAAMW,EAAW,IAAIhB,IAAoB,CAAEiB,sBAAuBnB,EAAgBoB,WAAW,IAC7FF,EAASG,gBAAkBrB,EAC3BkB,EAASI,QAAQnB,OAAOC,WAAYD,OAAOE,aAC3CjD,SAASmE,KAAKC,YAAYN,EAASO,YAEnC,IAAMC,EAAW,IAAIC,IAAcrB,EAAQY,EAASO,YACpDC,EAASE,iBAAiB,UAAU,WAAQV,EAASW,WAOrD1B,OAAOyB,iBAAiB,UAJpBtB,EAAOwB,OAAS3B,OAAOC,WAAaD,OAAOE,YAC3CC,EAAOyB,8BACPb,EAASI,QAAQnB,OAAOC,WAAYD,OAAOE,eAQ/C,IAJA,IAAM2B,EAAW,IAAI9B,IACf+B,EAAQ,IAAI/B,IACZpC,EAAY,GACZoE,EAAS,GACNnE,EAAI,EAAGA,EAAIyC,EAAWzC,IAAK,CAChC,IAAMoE,EAAqB,GAAhBzC,KAAK0C,SACVC,EAAqB,GAAhB3C,KAAK0C,SACVE,EAAqB,GAAhB5C,KAAK0C,SAChBtE,EAAUyE,KAAKJ,EAAGE,EAAGC,GACrBL,EAAMO,OAAO9C,KAAK+C,IAAIN,EAAI,IAAKzC,KAAK+C,IAAIJ,EAAI,IAAK3C,KAAK+C,IAAIH,EAAI,KAC9DJ,EAAOK,KAAKN,EAAMS,EAAGT,EAAMU,EAAGV,EAAMzC,GAGxCwC,EAASY,aAAa,WAAY,IAAI1C,IAA6BpC,EAAW,IAC9EkE,EAASY,aAAa,QAAS,IAAI1C,IAA6BgC,EAAQ,IACxE,IAAMW,EAAW,IAAI3C,IAAqB,CAAE4C,KAAM,IAAKC,cAAc,IAC/DC,EAAS,IAAI9C,IAAa8B,EAAUa,GAC1C9B,EAAME,IAAI+B,GAEV,IAAMC,EAAQ,IAAI/C,IAAmB,SAAU,KAC/Ca,EAAME,IAAIgC,GACV3C,EAAO4C,SAASZ,EAAI,GACpBhC,EAAO4C,SAASf,EAAI,EACpB7B,EAAO4C,SAASb,EAAI,EACpBX,EAASyB,SAST,OARc,SAAVC,IACAC,sBAAsBD,GACtBxC,EAAU0C,UAAUN,EAAOhB,SAASuB,WAAWL,SAASM,OACxDR,EAAOhB,SAASuB,WAAWL,SAASO,aAAc,EAClD/B,EAASyB,SACTjC,EAASwC,OAAO3C,EAAOT,GAE3B8C,GACO,WACHpB,EAAS2B,UACTd,EAASc,UACTzC,EAASyC,aAEd,CAAC3D,EAAgBQ,EAAWD,EAAMD,EAAQ1C,EAAIgD,IAEjDxD,SAASwE,iBAAiB,qBAAqB,SAACgC,GAC5C,IAAMpG,EAAMoG,EAAErG,OAAOC,IACfC,EAAImG,EAAErG,OAAOE,EACP,IAARD,GACA8C,EAAO4C,SAASW,IAAI,EAAG,EAAG,IAC1BlD,EAAW,GAAK,IAAIjD,EAAOD,EAAGG,GAC9BiD,EAAaF,EAAW,KACT,IAARnD,IACP8C,EAAO4C,SAASW,IAAI,EAAG,EAAG,IAC1BlD,EAAW,GAAK,IAAIlB,EAAOhC,EAAGG,GAC9BiD,EAAaF,EAAW,QAIhC,IAaA,EAAkCd,oBAAS,GAA3C,mBAAOiE,EAAP,KAAgBC,EAAhB,KACA,OACI,8BACI,sBAAKC,GAAG,UAAUC,MAAO,CAAEf,SAAU,WAAYgB,MAAO,MAAOC,IAAK,OAApE,UACI,cAACC,EAAA,EAAD,CAAOH,MAAO,CAAEf,SAAU,WAAYgB,MAAO,MAAOC,IAAK,OAAzD,SACI,cAACE,EAAA,EAAD,CAAYC,QAAS,kBAAMP,GAAgBD,IAA3C,SACKA,EAAU,qCAAE,cAAC,IAAD,IAAoB,cAAC,IAAD,OAAsB,qCAAE,cAAC,IAAD,IAAmB,cAAC,IAAD,WAGpF,cAACS,EAAA,EAAD,CAAOC,UAAU,OAAOC,GAAIX,EAASY,cAAY,EAACC,eAAa,EAA/D,SACI,cAACP,EAAA,EAAD,CAAOH,MAAO,CAAEf,SAAU,WAAYiB,IAAK,OAAQD,MAAO,MAAOU,MAAO,QAASC,SAAU,UAA3F,SACI,eAACtG,EAAA,EAAD,CAAMuG,WAAS,EAACN,UAAU,SAASP,MAAO,CAAEc,QAAS,UAArD,UACI,cAACxG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIwF,MAAO,CAAEe,aAAc,OAA1C,SACI,eAACC,EAAA,EAAD,CACI1F,WAAS,EADb,UAGI,cAAC2F,EAAA,EAAD,wBACA,eAACC,EAAA,EAAD,CACIC,MAAOxE,EAAUpD,IACjB6H,SAhCZ,SAACzB,GACrB/C,EAAaF,EAAWiD,EAAE/G,OAAOuI,SA6BL,UAII,cAACE,EAAA,EAAD,CAAUF,MAAO,EAAjB,oBACA,cAACE,EAAA,EAAD,CAAUF,MAAO,EAAjB,4BAKZ,cAAC7G,EAAA,EAAD,CAAMC,MAAI,EAACsG,WAAS,EAACS,QAAS,EAA9B,SACK3E,EAAU4E,iBAEf,cAACC,EAAA,EAAD,CAASxB,MAAO,CAAEyB,UAAW,MAAOV,aAAc,SAElD,cAACzG,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,eAACD,EAAA,EAAD,CAAMC,MAAI,EAACsG,WAAS,EAACS,QAAS,EAA9B,UACI,cAAChH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,4HAGJ,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,eAACwG,EAAA,EAAD,CACI1F,WAAS,EADb,UAGI,cAAC2F,EAAA,EAAD,wBACA,eAACC,EAAA,EAAD,CACIC,MAAO5E,EACP6E,SAvDhB,SAAC5I,GACzBgE,EAAahE,EAAMI,OAAOuI,QAoDU,UAII,cAACE,EAAA,EAAD,CAAUF,MAAO,IAAjB,mBACA,cAACE,EAAA,EAAD,CAAUF,MAAO,IAAjB,mBACA,cAACE,EAAA,EAAD,CAAUF,MAAO,IAAjB,mBACA,cAACE,EAAA,EAAD,CAAUF,MAAO,IAAjB,mBACA,cAACE,EAAA,EAAD,CAAUF,MAAO,IAAjB,iCAMpB,cAACK,EAAA,EAAD,CAASxB,MAAO,CAAEyB,UAAW,MAAOV,aAAc,SAElD,cAACzG,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,eAACD,EAAA,EAAD,CAAMC,MAAI,EAACsG,WAAS,EAACS,QAAS,EAA9B,UACI,cAAChH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,mHAGJ,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,eAACwG,EAAA,EAAD,CACI1F,WAAS,EADb,UAGI,cAAC2F,EAAA,EAAD,uBACA,eAACC,EAAA,EAAD,CACIC,MAAOxH,EACPyH,SA/ErB,SAAC5I,GACpBiE,EAAMjE,EAAMI,OAAOuI,QA4EiB,UAII,cAACE,EAAA,EAAD,CAAUF,MAAO,OAAjB,qBACA,cAACE,EAAA,EAAD,CAAUF,MAAO,OAAjB,oBACA,cAACE,EAAA,EAAD,CAAUF,MAAO,MAAjB,kBACA,cAACE,EAAA,EAAD,CAAUF,MAAO,KAAjB,8BAMpB,cAACK,EAAA,EAAD,CAASxB,MAAO,CAAEyB,UAAW,MAAOV,aAAc,SAElD,cAACzG,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,eAACD,EAAA,EAAD,CAAMC,MAAI,EAACsG,WAAS,EAACS,QAAS,EAA9B,UACI,cAAChH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,oFAEJ,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAACkH,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAQC,QAAS9F,EAAgBqF,SAAU,kBAAMpF,GAAmBD,MAC7EX,MAAO,cAACX,EAAA,EAAD,CAAYuF,MAAO,CAAE8B,SAAU,WAA/B,2BACPC,eAAe,iBAK/B,cAACP,EAAA,EAAD,CAASxB,MAAO,CAAEyB,UAAW,MAAOV,aAAc,SAElD,cAACzG,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,eAACD,EAAA,EAAD,CAAMC,MAAI,EAACsG,WAAS,EAACS,QAAS,EAA9B,UACI,cAAChH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,iDAEJ,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAACkH,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAQC,QAAShG,EAAgBuF,SAhH/D,WACftF,GAAmBQ,EAAKS,SACxBT,EAAKS,SAAWT,EAAKS,WA+Ge3B,MAAO,cAACX,EAAA,EAAD,CAAYuF,MAAO,CAAE8B,SAAU,WAA/B,yBACPC,eAAe,iBAK/B,cAACP,EAAA,EAAD,CAASxB,MAAO,CAAEyB,UAAW,MAAOV,aAAc,SAElD,cAACzG,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,eAACD,EAAA,EAAD,CAAMC,MAAI,EAACsG,WAAS,EAACS,QAAS,EAA9B,UACI,cAAChH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,qDAEJ,cAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAACa,EAAA,EAAD,CAAQC,WAAS,EAAC+E,QAAS,kBAAMhE,EAAO4C,SAASW,IAAI,EAAG,EAAG,KAA3D,6CCtOxCoC,IAASvC,OACL,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,YAAlB,SACI,+CAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,QAAlB,SACI,iDAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,WAIZ/I,SAASgJ,eAAe,U","file":"static/js/main.74ac56a6.chunk.js","sourcesContent":["import { Grid, Typography, Link, TextField, Button } from \"@material-ui/core\"\r\nfunction updateParams(event) {\r\n    event.preventDefault()\r\n    const f = new FormData(event.target)\r\n    const res = { sigma: Number(f.get('sigma')), beta: Number(f.get('beta')), rho: Number(f.get('rho')) }\r\n    document.dispatchEvent(new CustomEvent('attractor_updated', { detail: { idx: 0, p: res } }))\r\n}\r\nexport default class Lorenz {\r\n    constructor(params = { sigma: 10, rho: 28, beta: 8.0 / 3.0 }, dt = .00125) {\r\n        this.idx = 0\r\n        this.params = params\r\n        this.dt = dt\r\n    }\r\n    updatePTS(positions) {\r\n        for (let i = 0; i < positions.length; i += 3) {\r\n            // console.log(i, positions[i], positions[i + 1], positions[i + 2])\r\n            const _x = positions[i]\r\n            const _y = positions[i + 1]\r\n            const _z = positions[i + 2]\r\n\r\n            const dx = (this.params.sigma * (_y - _x)) * this.dt;\r\n            const dy = ((_x * (this.params.rho - _z)) - _y) * this.dt\r\n            const dz = ((_x * _y) - (this.params.beta * _z)) * this.dt\r\n\r\n            positions[i] += dx\r\n            positions[i + 1] += dy\r\n            positions[i + 2] += dz\r\n        }\r\n    }\r\n\r\n    getInfoPanel() {\r\n        return (<>\r\n            <Grid item xs={8}>\r\n                <Typography>Sigma, beta, and rho are parameters for the Lorenz attractor ({<Link href='https://en.wikipedia.org/wiki/Lorenz_system' target='_blank' rel=\"noreferrer\">Wikipedia</Link>})</Typography>\r\n                <Typography>Try changing them and click 'update params' to restart the simulation!</Typography>\r\n                <Typography>dx/dt = sigma*(y-x)</Typography>\r\n                <Typography>dy/dt = x*(rho-z) - y</Typography>\r\n                <Typography>dz/dt = x*y - beta*z</Typography>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <form onSubmit={updateParams}>\r\n                    <TextField name='sigma' defaultValue={this.params.sigma} inputProps={{ type: 'number', step: 'any' }} label='SIGMA' />\r\n                    <TextField name='beta' defaultValue={this.params.beta} inputProps={{ type: 'number', step: 'any' }} label='BETA' />\r\n                    <TextField name='rho' defaultValue={this.params.rho} inputProps={{ type: 'number', step: 'any' }} label='RHO' />\r\n                    <Button fullWidth type='submit'>UPDATE PARAMS</Button>\r\n                </form>\r\n            </Grid>\r\n        </>\r\n        )\r\n    }\r\n}\r\n","import { Grid, Typography, Link, TextField, Button } from \"@material-ui/core\"\r\nfunction updateParams(event) {\r\n    event.preventDefault()\r\n    const f = new FormData(event.target)\r\n    const res = { b: Number(f.get('b')) }\r\n    document.dispatchEvent(new CustomEvent('attractor_updated', { detail: { idx: 1, p: res } }))\r\n}\r\nexport default class Thomas {\r\n    constructor(params = { b: .208186 }, dt = .00125) {\r\n        this.idx = 1\r\n        this.params = params\r\n        this.dt = 10 * dt\r\n    }\r\n    updatePTS(positions) {\r\n        for (let i = 0; i < positions.length; i += 3) {\r\n            // console.log(i, positions[i], positions[i + 1], positions[i + 2])\r\n            const _x = positions[i]\r\n            const _y = positions[i + 1]\r\n            const _z = positions[i + 2]\r\n\r\n            const dx = (Math.sin(_y) - (this.params.b * _x)) * this.dt;\r\n            const dy = (Math.sin(_z) - (this.params.b * _y)) * this.dt\r\n            const dz = (Math.sin(_x) - (this.params.b * _z)) * this.dt\r\n\r\n            positions[i] += dx\r\n            positions[i + 1] += dy\r\n            positions[i + 2] += dz\r\n        }\r\n    }\r\n\r\n    getInfoPanel() {\r\n        return (<>\r\n            <Grid item xs={8}>\r\n                <Typography>B is the only parameter for the Thomas cyclically symmetric attractor ({<Link href='https://en.wikipedia.org/wiki/Thomas%27_cyclically_symmetric_attractor' target='_blank' rel=\"noreferrer\">Wikipedia</Link>})</Typography>\r\n                <Typography>Try changing it and click 'update params' to restart the simulation!</Typography>\r\n                <Typography>dx/dt = sin(y) - b*x</Typography>\r\n                <Typography>dy/dt = sin(z) - b*y</Typography>\r\n                <Typography>dz/dt = sin(x) - b*z</Typography>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <form onSubmit={updateParams}>\r\n                    <TextField name='b' defaultValue={this.params.b} inputProps={{ type: 'number', step: 'any' }} label='B' />\r\n                    <Button fullWidth type='submit'>UPDATE PARAMS</Button>\r\n                </form>\r\n            </Grid>\r\n        </>\r\n        )\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nimport {\r\n    Button, Select, MenuItem, FormControl, InputLabel, Grid, Slide, Typography,\r\n    Switch, Divider, FormControlLabel, IconButton, Paper\r\n} from '@material-ui/core'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\n\r\nimport Lorenz from './components/attractors/Lorenz';\r\nimport Thomas from './components/attractors/Thomas';\r\n\r\nfunction Attractors() {\r\n    const [gridVisibility, setGridVisibility] = useState(false)\r\n    const [preserveBuffer, setPreserveBuffer] = useState(false)// eslint-disable-next-line\r\n    const [camera, setCamera] = useState(new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000))// eslint-disable-next-line\r\n    const [grid, setGrid] = useState(new THREE.GridHelper(150, 150))\r\n    const [particles, setParticles] = useState(20000)\r\n    const [dt, setDT] = useState(.00125)\r\n\r\n    const attractors = [new Lorenz(), new Thomas()]\r\n    const [attractor, setAttractor] = useState(attractors[0])\r\n\r\n    useEffect(() => {\r\n        const scene = new THREE.Scene();\r\n        grid.visible = false;\r\n        scene.add(grid);\r\n        const renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: preserveBuffer, antialias: true })\r\n        renderer.autoClearColor = !preserveBuffer;\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        document.body.appendChild(renderer.domElement);\r\n\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.addEventListener('change', () => { renderer.clear() })\r\n\r\n        const resizeWindow = () => {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n        window.addEventListener('resize', resizeWindow());\r\n\r\n        const geometry = new THREE.BufferGeometry();\r\n        const color = new THREE.Color();\r\n        const positions = [];\r\n        const colors = [];\r\n        for (let i = 0; i < particles; i++) {\r\n            const x = (Math.random() * 25);\r\n            const y = (Math.random() * 25);\r\n            const z = (Math.random() * 25);\r\n            positions.push(x, y, z)\r\n            color.setRGB(Math.abs(x / 25), Math.abs(y / 25), Math.abs(z / 25));\r\n            colors.push(color.r, color.g, color.b);\r\n        }\r\n\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n        const material = new THREE.PointsMaterial({ size: .15, vertexColors: true });\r\n        const points = new THREE.Points(geometry, material);\r\n        scene.add(points);\r\n\r\n        const light = new THREE.AmbientLight(0xffffff, 100);\r\n        scene.add(light);\r\n        camera.position.z = 50;\r\n        camera.position.x = 0;\r\n        camera.position.y = 0;\r\n        controls.update();\r\n        var animate = () => {\r\n            requestAnimationFrame(animate);\r\n            attractor.updatePTS(points.geometry.attributes.position.array)\r\n            points.geometry.attributes.position.needsUpdate = true;\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n        return () => {\r\n            geometry.dispose()\r\n            material.dispose()\r\n            renderer.dispose()\r\n        }\r\n    }, [preserveBuffer, particles, grid, camera, dt, attractor])\r\n\r\n    document.addEventListener('attractor_updated', (e) => {\r\n        const idx = e.detail.idx\r\n        const p = e.detail.p\r\n        if (idx === 0) {\r\n            camera.position.set(0, 0, 75)\r\n            attractors[0] = new Lorenz(p, dt)\r\n            setAttractor(attractors[0])\r\n        } else if (idx === 1) {\r\n            camera.position.set(0, 0, 15)\r\n            attractors[1] = new Thomas(p, dt)\r\n            setAttractor(attractors[1])\r\n        }\r\n    })\r\n\r\n    const updateAttractor = (e) => {\r\n        setAttractor(attractors[e.target.value])\r\n    }\r\n    const updateParticleCount = (event) => {\r\n        setParticles(event.target.value);\r\n    };\r\n    const updateTimeStep = (event) => {\r\n        setDT(event.target.value);\r\n    };\r\n    const updateGrid = () => {\r\n        setGridVisibility(!grid.visible);\r\n        grid.visible = !grid.visible\r\n    }\r\n    const [options, setOptionsOpen] = useState(false)\r\n    return (\r\n        <div>\r\n            <div id='options' style={{ position: 'absolute', right: '5px', top: '0px' }}>\r\n                <Paper style={{ position: 'absolute', right: '5px', top: '0px' }}>\r\n                    <IconButton onClick={() => setOptionsOpen(!options)}>\r\n                        {options ? <><ChevronRightIcon /><SettingsIcon /></> : <><ChevronLeftIcon /><SettingsIcon /></>}\r\n                    </IconButton>\r\n                </Paper>\r\n                <Slide direction='left' in={options} mountOnEnter unmountOnExit>\r\n                    <Paper style={{ position: 'absolute', top: '52px', right: '5px', width: '500px', overflow: 'hidden' }}>\r\n                        <Grid container direction='column' style={{ padding: '.85rem' }}>\r\n                            <Grid item xs={12} style={{ marginBottom: '4px' }}>\r\n                                <FormControl\r\n                                    fullWidth\r\n                                >\r\n                                    <InputLabel>ATTRACTOR</InputLabel>\r\n                                    <Select\r\n                                        value={attractor.idx}\r\n                                        onChange={updateAttractor}\r\n                                    >\r\n                                        <MenuItem value={0}>LORENZ</MenuItem>\r\n                                        <MenuItem value={1}>THOMAS</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item container spacing={1}>\r\n                                {attractor.getInfoPanel()}\r\n                            </Grid>\r\n                            <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n                            <Grid item>\r\n                                <Grid item container spacing={1}>\r\n                                    <Grid item xs={8}>\r\n                                        <Typography>Chooses how many particles to render your scene with.\r\n                                            If the FPS is low, try setting this to a lower value.</Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={4}>\r\n                                        <FormControl\r\n                                            fullWidth\r\n                                        >\r\n                                            <InputLabel>PARTICLES</InputLabel>\r\n                                            <Select\r\n                                                value={particles}\r\n                                                onChange={updateParticleCount}\r\n                                            >\r\n                                                <MenuItem value={10000}>10000</MenuItem>\r\n                                                <MenuItem value={20000}>20000</MenuItem>\r\n                                                <MenuItem value={30000}>30000</MenuItem>\r\n                                                <MenuItem value={50000}>50000</MenuItem>\r\n                                                <MenuItem value={100000}>100000</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n                            <Grid item>\r\n                                <Grid item container spacing={1}>\r\n                                    <Grid item xs={8}>\r\n                                        <Typography>Chooses what dt is set to for the equations.\r\n                                            If FPS is low, try setting this to a&nbsp;higher value.</Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={4}>\r\n                                        <FormControl\r\n                                            fullWidth\r\n                                        >\r\n                                            <InputLabel>TIMESTEP</InputLabel>\r\n                                            <Select\r\n                                                value={dt}\r\n                                                onChange={updateTimeStep}\r\n                                            >\r\n                                                <MenuItem value={.000625}>.000625</MenuItem>\r\n                                                <MenuItem value={.00125}>.00125</MenuItem>\r\n                                                <MenuItem value={.0025}>.005</MenuItem>\r\n                                                <MenuItem value={.005}>.05</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n                            <Grid item>\r\n                                <Grid item container spacing={1}>\r\n                                    <Grid item xs={8}>\r\n                                        <Typography>Sets whether old pixels are cleared before the next frame is drawn.</Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={4}>\r\n                                        <FormControlLabel\r\n                                            control={<Switch checked={preserveBuffer} onChange={() => setPreserveBuffer(!preserveBuffer)}></Switch>}\r\n                                            label={<Typography style={{ fontSize: '.875rem' }}>TOGGLE BUFFER</Typography>}\r\n                                            labelPlacement='start'\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n                            <Grid item>\r\n                                <Grid item container spacing={1}>\r\n                                    <Grid item xs={8}>\r\n                                        <Typography>Toggles visibility of gridlines.</Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={4}>\r\n                                        <FormControlLabel\r\n                                            control={<Switch checked={gridVisibility} onChange={updateGrid}></Switch>}\r\n                                            label={<Typography style={{ fontSize: '.875rem' }}>TOGGLE GRID</Typography>}\r\n                                            labelPlacement='start'\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Divider style={{ marginTop: '4px', marginBottom: '4px' }}></Divider>\r\n\r\n                            <Grid item>\r\n                                <Grid item container spacing={1}>\r\n                                    <Grid item xs={8}>\r\n                                        <Typography>Resets the camera position/rotation.</Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={4}>\r\n                                        <Button fullWidth onClick={() => camera.position.set(0, 0, 50)}>Zero Camera</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Slide>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Attractors;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\nimport './index.css';\r\nimport Attractors from './Attractors';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path='/proj/viz'>\r\n                <div>visualizer</div>\r\n            </Route>\r\n            <Route exact path='/proj'>\r\n                <div>all projects</div>\r\n            </Route>\r\n            <Route exact path='/'>\r\n                <Attractors />\r\n            </Route>\r\n        </Switch>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}